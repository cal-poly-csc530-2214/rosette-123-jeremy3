Given:

pos(I, phi) is a subset of pos(I', phi)

To Prove:
if I |= phi, then I' |= phi

Definitions:

An NNF formula is one of:
	Literal
	NNF or NNF
	NNF and NNF
	
A Literal is a two-element pair:
	(notNegated, var)
	where negated is a Boolean representing whether the variable is or isn't negated (False means negated), and var is the variable name

An Interpretation is a set of Assignments to variables

An Assignment is a two-element tuple:
	(var, value)
	where var is the variable name, and value is either TRUE or FALSE

getLiterals phi :: NNF -> [Literal]
getLiterals (Literal negated var) = ((Literal negated var):[])
getLiterals (a or b) = (getLiterals a) ++ (getLiterals b)
getLiterals (a and b) = (getLiterals a) ++ (getLiterals b)

pos I phi :: Interpretation -> NNF -> [Literal]
pos I phi :: posHelper I (getLiterals phi)

posHelper :: Interpretation -> [Literal] -> [Literal]
posHelper [] _ = []
posHelper (a:I) literals =
	let l <- (Literal a.value a.var)
	if l in literals
		[l] ++ (posHelper I literals)
	else
		(posHelper I literals)

Proof:
Structural Induction

Base Case:
Given an NNF formula phi and an Interpretation I such that I |= phi.

For the base case, phi is a single variable formula (e.g p) (it can also be a negated varialed, e.g. !p)

Theremore (given I |= phi), I must be an interpetation containing the variable with the correct assigned value so phi is true.

More concretely, (assuming var name is p)
If phi is the formula p, then I must be [(Assignment P True)]
If phi is the formula !p, then I must be [(Assignment P False)]

Therefore pos(I, phi) is {p} or {!p} (depending on the cases above).

Since pos(I, phi) is a subset of pos(I', phi), and the only literal in the formula is p, pos(I', phi) must equal pos(I, phi).

Since I' contains satisfies the only literal in the formula, then I' |= phi.

Induction Step (OR Case):
Assume the following implications hold:
((I_l |= phi_l) and (pos(I_l, phi_l) is a subset of pos(I'_l, phi_l)) -> (I'_l |= phi_l)
((I_r |= phi_r) and (pos(I_r, phi_r) is a subset of pos(I'_r, phi_r)) -> (I'_r |= phi_r)

Let phi = (phi_l OR phi_r)

Since I'_l |= phi_l, then I'_l |= (phi_l OR phi_r), and therefore I'_l |= phi.

Therefore the implication holds for the induction step since it was shown that I'_l |= phi is always true.

Therefore the OR case of the induction step is true.

Induction Step (AND Case):
Assume the following implications hold:
((I_l |= phi_l) and (pos(I_l, phi_l) is a subset of pos(I'_l, phi_l)) -> (I'_l |= phi_l)
((I_r |= phi_r) and (pos(I_r, phi_r) is a subset of pos(I'_r, phi_r)) -> (I'_r |= phi_r)

Let phi = (phi_l AND phi_r)
Let I = (merge I_l I_r)
It will now be shown that this implies the following line:
((I |= phi) and (pos(I,phi) is a subset of pos(I', phi))) -> I' |= phi for all I'

Case I: (if there are contradictions in the merge between I_l and I_r)
Then phi is not satisfiable so it is NOT true that I |= phi, therefore the hypothesis of our implication is false and the implication as a whole is true.

Case II:
Given some interpretation I' such that pos(I, phi) is a subset of pos(I', phi),
then I' still contains all the positive literals of I_l and I_r (since pos(I, phi) = pos(I_l, phi) ++ pos(I_r, phi))
Since I' still contains all the positive literals of I, then I' satisfies I_l and I_r, and therefore I' |= phi.

Therefore the AND case for the induction step holds.

Therefore the implication is true for both induction cases and for the base case, therefore by the principle of structural induction, the implication is true.

QED
